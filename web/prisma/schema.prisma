generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PowerTier {
  casual
  mid
  competitive
  cedh
}

enum DeckVisibility {
  private
  unlisted
  public
}

enum DeckZone {
  mainboard
  sideboard
  maybeboard
  commander
}

enum TagSource {
  editorial
  inferred
}

enum PriceSource {
  scryfall
  mtggoldfish
}

enum ImportSource {
  csv
  mtg_arena_txt
  text_list
}

enum ImportStatus {
  pending
  processed
  failed
}

enum RecommendationType {
  related_card
  upgrade_suggestion
  trending_pick
}

enum TrendingScope {
  card
  deck
}

enum TrendingPeriod {
  daily
  weekly
}

enum AuthProvider {
  supabase
  card_bazaar
}

enum AuthSessionStatus {
  active
  revoked
  expired
}

enum AuthAuditEventType {
  link_initiated
  link_succeeded
  link_failed
  session_refreshed
  session_revoked
}

enum PrivacyRequestType {
  telemetry_opt_out
  telemetry_opt_in
  data_export
  data_delete
}

enum PrivacyRequestStatus {
  pending
  completed
  failed
}

enum IngestionJobType {
  scryfall_bulk
  price_snapshot
  telemetry_rollup
  trending_refresh
}

enum JobStatus {
  queued
  running
  succeeded
  failed
}

model User {
  id               String    @id @default(uuid()) @db.Uuid
  email            String    @unique
  handle           String    @unique
  avatarUrl        String?   @map("avatar_url")
  marketingOptOut  Boolean   @default(false) @map("marketing_opt_out")
  defaultFormat    String?   @map("default_format")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  profile          Profile?
  decks            Deck[]
  cardTags         CardTag[] @relation("CardTagAssignedBy")
  imports          Import[]
  events           EventLog[]
  recommendations  Recommendation[]
  linkedAccounts   LinkedAccount[]
  authBridgeSessions AuthBridgeSession[]
  authAuditEvents  AuthAuditEvent[]
  similarityBase   UserSimilarity[] @relation("UserSimilarityBase")
  similarityPeers  UserSimilarity[] @relation("UserSimilarityPeer")
  privacyRequests PrivacyRequest[]

  @@map("users")
}

model Profile {
  userId         String   @id @map("user_id") @db.Uuid
  displayName    String?  @map("display_name")
  bio            String?
  preferredTags  String[] @map("preferred_tags")
  powerLevelPref String?  @map("power_level_pref")
  sharedBazaarId String?  @map("shared_card_bazaar_id")
  updatedAt      DateTime @default(now()) @map("updated_at")

  user           User     @relation(fields: [userId], references: [id])

  @@map("profiles")
}

model LinkedAccount {
  id String @id @default(uuid()) @db.Uuid
  userId String @map("user_id") @db.Uuid
  provider AuthProvider
  providerUserId String @map("provider_user_id")
  accessToken String? @map("access_token")
  refreshToken String? @map("refresh_token")
  accessTokenExpiresAt DateTime? @map("access_token_expires_at")
  refreshTokenExpiresAt DateTime? @map("refresh_token_expires_at")
  scopes String[] @default([]) @map("scopes")
  metadata Json?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])
  bridgeSessions AuthBridgeSession[]
  auditEvents AuthAuditEvent[]

  @@unique([provider, providerUserId])
  @@map("linked_accounts")
}

model AuthBridgeSession {
  id String @id @default(uuid()) @db.Uuid
  userId String @map("user_id") @db.Uuid
  linkedAccountId String? @map("linked_account_id") @db.Uuid
  status AuthSessionStatus
  cardBazaarSessionId String? @map("card_bazaar_session_id")
  supabaseSessionId String? @map("supabase_session_id")
  issuedAt DateTime @default(now()) @map("issued_at")
  expiresAt DateTime? @map("expires_at")
  lastValidatedAt DateTime? @map("last_validated_at")
  ipAddress String? @map("ip_address")
  userAgent String? @map("user_agent")
  metadata Json?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])
  linkedAccount LinkedAccount? @relation(fields: [linkedAccountId], references: [id])
  auditEvents AuthAuditEvent[]

  @@map("auth_bridge_sessions")
}

model AuthAuditEvent {
  id String @id @default(uuid()) @db.Uuid
  userId String? @map("user_id") @db.Uuid
  linkedAccountId String? @map("linked_account_id") @db.Uuid
  sessionId String? @map("session_id") @db.Uuid
  eventType AuthAuditEventType @map("event_type")
  context Json?
  occurredAt DateTime @default(now()) @map("occurred_at")

  user User? @relation(fields: [userId], references: [id])
  linkedAccount LinkedAccount? @relation(fields: [linkedAccountId], references: [id])
  session AuthBridgeSession? @relation(fields: [sessionId], references: [id])

  @@index([userId])
  @@index([linkedAccountId])
  @@map("auth_audit_events")
}
model Card {
  id            String   @id @default(uuid()) @db.Uuid
  scryfallId    String   @map("scryfall_id") @unique
  oracleId      String?  @map("oracle_id")
  name          String
  setCode       String   @map("set_code")
  rarity        String
  manaCost      String?  @map("mana_cost")
  cmc           Decimal? @db.Decimal(10, 2)
  colorIdentity String[] @map("color_identity")
  typeLine      String   @map("type_line")
  oracleText    String?  @map("oracle_text")
  imageUris     Json?    @map("image_uris")
  legality      Json?    @map("legality")
  isToken       Boolean  @default(false) @map("is_token")
  createdAt     DateTime @default(now()) @map("created_at")

  printings     Printing[]
  tags          CardTag[]
  dailyMetrics  CardDailyMetric[]
  similaritySources CardSimilarity[] @relation("CardSimilarityBase")
  similarityTargets CardSimilarity[] @relation("CardSimilarityRelated")
  upgradeCandidates DeckUpgradeCandidate[]


  @@map("cards")
}

model Printing {
  id              String   @id @default(uuid()) @db.Uuid
  cardId          String   @map("card_id") @db.Uuid
  setCode         String   @map("set_code")
  collectorNumber String   @map("collector_number")
  frame           String?
  promoTypes      String[] @map("promo_types")
  finishes        String[]
  releasedAt      DateTime? @map("released_at")
  stockStatus     String?   @map("stock_status")
  cardBazaarSku   String?   @map("card_bazaar_sku")
  createdAt       DateTime  @default(now()) @map("created_at")

  card            Card      @relation(fields: [cardId], references: [id])
  prices          Price[]
  deckCards       DeckCard[]

  @@map("printings")
}

model Price {
  id          String      @id @default(uuid()) @db.Uuid
  printingId  String      @map("printing_id") @db.Uuid
  source      PriceSource
  currency    String      @default("USD")
  retail      Decimal?    @db.Decimal(12, 2)
  buylist     Decimal?    @db.Decimal(12, 2)
  foilRetail  Decimal?    @map("foil_retail") @db.Decimal(12, 2)
  foilBuylist Decimal?    @map("foil_buylist") @db.Decimal(12, 2)
  sampledAt   DateTime    @map("sampled_at")

  printing    Printing    @relation(fields: [printingId], references: [id])

  @@map("prices")
}

model CardTag {
  id           String    @id @default(uuid()) @db.Uuid
  cardId       String    @map("card_id") @db.Uuid
  tagSlug      String    @map("tag_slug")
  tagLabel     String    @map("tag_label")
  tagSource    TagSource @map("tag_source")
  assignedById String?   @map("assigned_by") @db.Uuid
  assignedAt   DateTime  @default(now()) @map("assigned_at")

  card         Card      @relation(fields: [cardId], references: [id])
  assignedBy   User?     @relation("CardTagAssignedBy", fields: [assignedById], references: [id])

  @@map("card_tags")
}

model Deck {
  id          String         @id @default(uuid()) @db.Uuid
  userId      String?        @map("user_id") @db.Uuid
  name        String
  format      String
  powerTier   PowerTier?     @map("power_tier")
  description String?
  visibility  DeckVisibility @default(private)
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")

  owner       User?          @relation(fields: [userId], references: [id])
  cards       DeckCard[]
  dailyMetrics DeckDailyMetric[]
  upgradeCandidates DeckUpgradeCandidate[]


  @@map("decks")
}

model DeckCard {
  deckId     String   @map("deck_id") @db.Uuid
  printingId String   @map("printing_id") @db.Uuid
  quantity   Int
  zone       DeckZone

  deck       Deck     @relation(fields: [deckId], references: [id])
  printing   Printing @relation(fields: [printingId], references: [id])

  @@id([deckId, printingId, zone])
  @@map("deck_cards")
}

model Import {
  id          String        @id @default(uuid()) @db.Uuid
  userId      String?       @map("user_id") @db.Uuid
  source      ImportSource
  rawPayload  String?       @map("raw_payload")
  normalized  Json?         @map("normalized")
  status      ImportStatus
  processedAt DateTime?     @map("processed_at")
  createdAt   DateTime      @default(now()) @map("created_at")

  user        User?         @relation(fields: [userId], references: [id])

  @@map("imports")
}

model EventLog {
  id           String    @id @default(uuid()) @db.Uuid
  userId       String?   @map("user_id") @db.Uuid
  sessionId    String?   @map("session_id") @db.Uuid
  eventType    String    @map("event_type")
  subjectType  String?   @map("subject_type")
  subjectId    String?   @map("subject_id") @db.Uuid
  context      Json?     @map("context")
  valueNumeric Decimal?  @map("value_numeric") @db.Decimal(12, 2)
  valueText    String?   @map("value_text")
  occurredAt   DateTime  @default(now()) @map("occurred_at")

  user         User?     @relation(fields: [userId], references: [id])

  @@map("event_log")
}

model IngestionJobRun {
  id           String           @id @default(uuid()) @db.Uuid
  jobType      IngestionJobType @map("job_type")
  status       JobStatus        @default(queued)
  startedAt    DateTime         @default(now()) @map("started_at")
  completedAt  DateTime?        @map("completed_at")
  errorMessage String?          @map("error_message")
  metadata     Json?

  @@map("ingestion_job_runs")
}

model CardDailyMetric {
  id              String   @id @default(uuid()) @db.Uuid
  cardId          String   @map("card_id") @db.Uuid
  metricDate      DateTime @map("metric_date") @db.Date
  views           Int      @default(0)
  uniqueUsers     Int      @map("unique_users") @default(0)
  deckInclusions  Int      @map("deck_inclusions") @default(0)
  priceAvg        Decimal? @map("price_avg") @db.Decimal(12, 4)
  priceChange     Decimal? @map("price_change") @db.Decimal(12, 4)
  createdAt       DateTime @default(now()) @map("created_at")

  card            Card     @relation(fields: [cardId], references: [id])

  @@unique([cardId, metricDate])
  @@map("card_daily_metrics")
}

model DeckDailyMetric {
  id              String   @id @default(uuid()) @db.Uuid
  deckId          String   @map("deck_id") @db.Uuid
  metricDate      DateTime @map("metric_date") @db.Date
  views           Int      @default(0)
  uniqueUsers     Int      @map("unique_users") @default(0)
  imports         Int      @default(0)
  exports         Int      @default(0)
  bridgeRequests  Int      @map("bridge_requests") @default(0)
  winRate         Decimal? @map("win_rate") @db.Decimal(5, 2)
  createdAt       DateTime @default(now()) @map("created_at")

  deck            Deck     @relation(fields: [deckId], references: [id])

  @@unique([deckId, metricDate])
  @@map("deck_daily_metrics")
}

model CardSimilarity {
  id             String   @id @default(uuid()) @db.Uuid
  cardId         String   @map("card_id") @db.Uuid
  relatedCardId  String   @map("related_card_id") @db.Uuid
  score          Decimal? @db.Decimal(8, 4)
  components     Json?    @map("components")
  rationale      String?  @map("rationale")
  generatedAt    DateTime @default(now()) @map("generated_at")

  card           Card     @relation("CardSimilarityBase", fields: [cardId], references: [id])
  relatedCard    Card     @relation("CardSimilarityRelated", fields: [relatedCardId], references: [id])

  @@unique([cardId, relatedCardId])
  @@map("card_similarity")
}

model DeckUpgradeCandidate {
  id           String   @id @default(uuid()) @db.Uuid
  deckId       String   @map("deck_id") @db.Uuid
  cardId       String   @map("card_id") @db.Uuid
  score        Decimal? @db.Decimal(8, 4)
  components   Json?    @map("components")
  rationale    String?  @map("rationale")
  generatedAt  DateTime @default(now()) @map("generated_at")

  deck         Deck     @relation(fields: [deckId], references: [id])
  card         Card     @relation(fields: [cardId], references: [id])

  @@unique([deckId, cardId])
  @@map("deck_upgrade_candidates")
}

model UserSimilarity {
  id               String   @id @default(uuid()) @db.Uuid
  userId           String   @map("user_id") @db.Uuid
  similarUserId    String   @map("similar_user_id") @db.Uuid
  score            Decimal  @db.Decimal(8, 4)
  sharedInteractions Int    @map("shared_interactions") @default(0)
  lastComputedAt   DateTime @default(now()) @map("last_computed_at")

  user             User     @relation("UserSimilarityBase", fields: [userId], references: [id])
  similarUser      User     @relation("UserSimilarityPeer", fields: [similarUserId], references: [id])

  @@unique([userId, similarUserId])
  @@map("user_similarity_scores")
}

model PrivacyRequest {
  id           String              @id @default(uuid()) @db.Uuid
  userId       String?             @map("user_id") @db.Uuid
  requestType  PrivacyRequestType  @map("request_type")
  status       PrivacyRequestStatus @default(pending)
  metadata     Json?
  createdAt    DateTime            @default(now()) @map("created_at")
  resolvedAt   DateTime?           @map("resolved_at")

  user         User?               @relation(fields: [userId], references: [id])

  @@map("privacy_requests")
}

model TrendingSnapshot {
  id           String          @id @default(uuid()) @db.Uuid
  scope        TrendingScope
  subjectId    String          @map("subject_id") @db.Uuid
  period       TrendingPeriod
  trendScore   Decimal         @map("trend_score") @db.Decimal(12, 4)
  components   Json?           @map("components")
  calculatedAt DateTime        @default(now()) @map("calculated_at")

  @@unique([scope, subjectId, period])
  @@map("trending_snapshots")
}

model Recommendation {
  id                 String               @id @default(uuid()) @db.Uuid
  userId             String?              @map("user_id") @db.Uuid
  recommendationType RecommendationType  @map("recommendation_type")
  payload            Json
  generatedAt        DateTime             @default(now()) @map("generated_at")
  expiresAt          DateTime?            @map("expires_at")

  user               User?                @relation(fields: [userId], references: [id])

  @@map("recommendations")
}





